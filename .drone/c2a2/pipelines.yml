kind : pipeline
name : CI

type : docker

trigger :
  event :
    - push
    - tag

volumes :
  - name : m2cache
    host :
      path : /app/.m2
steps :

  - name : build
    image : docker-registry.c2a2.com/ujar/svc-builder:openjdk-19-slim
    pull : if-not-exists
    volumes :
      - name : m2cache
        path : /root/.m2
    environment :
      DATASOURCE_DRIVER : org.postgresql.Driver
      DATASOURCE_URL : jdbc:postgresql://db:5432/sa_test_db
      KAFKA_BOOTSTRAP_SERVERS : kafka:9092
      DEPLOYER_USERNAME :
        from_secret : DEPLOYER_USERNAME
      DEPLOYER_PASSWORD :
        from_secret : DEPLOYER_PASSWORD
      SONAR_HOST :
        from_secret : SONAR_HOST
      SONAR_TOKEN :
        from_secret : SONAR_TOKEN
    commands :
      - mvn clean compile test-compile --batch-mode -Dstyle.color=always -s ../maven-settings.xml -Ddeployer.username=$DEPLOYER_USERNAME -Ddeployer.password=$DEPLOYER_PASSWORD
      #- mvn pmd:check --batch-mode -Dstyle.color=always -s ../maven-settings.xml -Ddeployer.username=$DEPLOYER_USERNAME -Ddeployer.password=$DEPLOYER_PASSWORD
      #- mvn -Dstyle.color=always com.github.spotbugs:spotbugs-maven-plugin:4.7.3.0:check -Dspotbugs.xmlOutput=true -Dspotbugs.failOnError=true -Dspotbugs.excludeFilterFile=../spotbugs-exclude.xml -Dspotbugs.includeTests=true --batch-mode -s ../maven-settings.xml -Ddeployer.username=$DEPLOYER_USERNAME -Ddeployer.password=$DEPLOYER_PASSWORD
      - mvn -Dstyle.color=always org.jacoco:jacoco-maven-plugin:prepare-agent verify org.jacoco:jacoco-maven-plugin:report sonar:sonar -Dsonar.host.url=$SONAR_HOST -Dsonar.login=$SONAR_TOKEN -Dsonar.projectKey=org.ujar:sample-lorem-mix-kafka-restful -Dsonar.projectName=org.ujar:sample-lorem-mix-kafka-restful --batch-mode -s ../maven-settings.xml -Ddeployer.username=$DEPLOYER_USERNAME -Ddeployer.password=$DEPLOYER_PASSWORD
      - mvn package -Dstyle.color=always -DskipTests -Dmaven.javadoc.skip=true -Dcheckstyle.skip=true --batch-mode -s ../maven-settings.xml -Ddeployer.username=$DEPLOYER_USERNAME -Ddeployer.password=$DEPLOYER_PASSWORD
    when :
      event :
        - push
        - tag

  - name : publish-snapshot-jar
    depends_on :
      - build
    image : docker-registry.c2a2.com/ujar/svc-builder:openjdk-19-slim
    pull : if-not-exists
    volumes :
      - name : m2cache
        path : /root/.m2
    environment :
      DEPLOYER_USERNAME :
        from_secret : DEPLOYER_USERNAME
      DEPLOYER_PASSWORD :
        from_secret : DEPLOYER_PASSWORD
    commands :
      - mvn deploy -DskipTests -Dmaven.javadoc.skip=true -Dcheckstyle.skip=true -s ../maven-settings.xml -Ddeployer.username=$DEPLOYER_USERNAME -Ddeployer.password=$DEPLOYER_PASSWORD -DaltDeploymentRepository=ujar-snapshots-repository::default::https://nexus.c2a2.com/repository/maven-snapshots
    when :
      branch :
        include :
          - "develop"
          - "prerelease/*"
          - "*.*.x"

  - name : publish-release-jar
    depends_on :
      - build
    image : docker-registry.c2a2.com/ujar/svc-builder:openjdk-19-slim
    pull : if-not-exists
    volumes :
      - name : m2cache
        path : /root/.m2
    environment :
      DEPLOYER_USERNAME :
        from_secret : DEPLOYER_USERNAME
      DEPLOYER_PASSWORD :
        from_secret : DEPLOYER_PASSWORD
    commands :
      - mvn deploy -DskipTests -Dmaven.javadoc.skip=true -Dcheckstyle.skip=true -s ../maven-settings.xml -Ddeployer.username=$DEPLOYER_USERNAME -Ddeployer.password=$DEPLOYER_PASSWORD -DaltDeploymentRepository=ujar-releases-repository::default::https://nexus.c2a2.com/repository/maven-releases
    when :
      ref :
        - "refs/tags/*"

  - name : build-container-with-feature-for-words-processing
    depends_on :
      - build
    image : plugins/docker
    settings :
      dockerfile : .drone/c2a2/Dockerfile
      context : ./words-processing/
      storage_driver : vfs
      username :
        from_secret : DOCKER_USERNAME
      password :
        from_secret : DOCKER_PASSWORD
      repo : docker-registry.c2a2.com/ujar/sample-lorem-mix-words-processing
      registry : docker-registry.c2a2.com
      force_tag : true
      build_args : BUILD_VERSION=${DRONE_COMMIT}
      tags :
        - ${DRONE_BRANCH:22}
    when :
      branch :
        include :
          - "feature/containerized-*"

  - name : build-container-with-feature-for-reports-history
    depends_on :
      - build-container-with-feature-for-words-processing
    image : plugins/docker
    settings :
      dockerfile : .drone/c2a2/Dockerfile
      context : ./reports-history/
      storage_driver : vfs
      username :
        from_secret : DOCKER_USERNAME
      password :
        from_secret : DOCKER_PASSWORD
      repo : docker-registry.c2a2.com/ujar/sample-lorem-mix-reports-history
      registry : docker-registry.c2a2.com
      force_tag : true
      build_args : BUILD_VERSION=${DRONE_COMMIT}
      tags :
        - ${DRONE_BRANCH:22}
    when :
      branch :
        include :
          - "feature/containerized-*"

  - name : build-container-release-words-processing
    depends_on :
      - publish-release-jar
    image : plugins/docker
    settings :
      dockerfile : .drone/c2a2/Dockerfile
      context : ./words-processing/
      storage_driver : vfs
      username :
        from_secret : DOCKER_USERNAME
      password :
        from_secret : DOCKER_PASSWORD
      repo : docker-registry.c2a2.com/ujar/sample-lorem-mix-words-processing
      registry : docker-registry.c2a2.com
      force_tag : true
      build_args : BUILD_VERSION=${DRONE_COMMIT}
      tags :
        - ${DRONE_TAG}
        - "latest"
    when :
      ref :
        - "refs/tags/*"

  - name : build-container-release-reports-history
    depends_on :
      - build-container-release-words-processing
    image : plugins/docker
    settings :
      dockerfile : .drone/c2a2/Dockerfile
      context : ./reports-history/
      storage_driver : vfs
      username :
        from_secret : DOCKER_USERNAME
      password :
        from_secret : DOCKER_PASSWORD
      repo : docker-registry.c2a2.com/ujar/sample-lorem-mix-reports-history
      registry : docker-registry.c2a2.com
      force_tag : true
      build_args : BUILD_VERSION=${DRONE_COMMIT}
      tags :
        - ${DRONE_TAG}
        - "latest"
    when :
      ref :
        - "refs/tags/*"

services :
  - name : db
    image : postgres:13.9
    environment :
      POSTGRES_USER : postgres
      POSTGRES_PASSWORD : postgres
      POSTGRES_DB : sa_test_db

  - name : zookeeper
    image : docker.io/bitnami/zookeeper:3.8
    environment :
      ZOOKEEPER_CLIENT_PORT : 2181
      ZOOKEEPER_TICK_TIME : 2000
      ALLOW_ANONYMOUS_LOGIN : yes

  - name : kafka
    image : docker.io/bitnami/kafka:3.4
    environment :
      KAFKA_BROKER_ID : 1
      KAFKA_CFG_LISTENERS : PLAINTEXT://:9092,PLAINTEXT_KAFKA://:9091
      KAFKA_CFG_ADVERTISED_LISTENERS : PLAINTEXT://kafka:9092,PLAINTEXT_KAFKA://kafka:9091
      KAFKA_CFG_ZOOKEEPER_CONNECT : zookeeper:2181
      KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE : true
      ALLOW_PLAINTEXT_LISTENER : yes
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP : PLAINTEXT:PLAINTEXT,PLAINTEXT_KAFKA:PLAINTEXT

---

kind : pipeline
name : CreateReleaseManually
type : docker
trigger :
  event :
    - custom
  branch :
    - "develop"
    - "*.*.x"

volumes :
  - name : m2cache
    host :
      path : /app/.m2

steps :
  - name : create-release-tag
    image : docker-registry.c2a2.com/ujar/svc-builder:openjdk-19-slim
    pull : if-not-exists
    volumes :
      - name : m2cache
        path : /root/.m2
    commands :
      - echo Prepare new version ${RELEASE_VERSION}
      - mkdir ${RELEASE_VERSION}
      - rmdir ${RELEASE_VERSION}
      - export NEXT_SNAPSHOT=${SNAPSHOT_VERSION}-SNAPSHOT
      - export GIT_AUTHOR_NAME=$${SVC_BUILD_GIT_USERNAME}
      - export GIT_AUTHOR_EMAIL=$${SVC_BUILD_GIT_EMAIL}
      - export GIT_COMMITTER_NAME=$${SVC_BUILD_GIT_USERNAME}
      - export GIT_COMMITTER_EMAIL=$${SVC_BUILD_GIT_EMAIL}
      - git remote set-url --push origin ${DRONE_GIT_SSH_URL}
      - git checkout -b v${RELEASE_VERSION}
      - mvn versions:set -DremoveSnapshot
      - mvn versions:set -DnewVersion=${RELEASE_VERSION}
      - >-
        git commit -a -m "feat: bump version to $${RELEASE_VERSION}"
      - git tag ${RELEASE_VERSION} && git push origin ${RELEASE_VERSION}
      - echo "âœ… Release tag ${RELEASE_VERSION} was created."
      - sleep 10
      - git tag -d ${RELEASE_VERSION} && git checkout ${DRONE_COMMIT_BRANCH} && git branch -D v${RELEASE_VERSION}
      - mvn versions:set -DnewVersion=$${NEXT_SNAPSHOT}
      - >-
        git commit -a -m "feat: create new $${NEXT_SNAPSHOT}"
      - git push origin ${DRONE_COMMIT_BRANCH}
      - echo "âœ… Started $${NEXT_SNAPSHOT}."
      - echo "ðŸš€ Good job, new version ${RELEASE_VERSION} was released successfully."
